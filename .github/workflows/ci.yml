# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Unit & Integration tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Unit-Test:
    name: Unit Test
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install openssl
      run: sudo apt-get update && sudo apt-get install -y openssl

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Unit Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  Integration-test:
    name: Integration-test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Read branch name from iotauth-ref.txt
      id: read_ref
      run: |
        ref=$(head -n 1 iotauth-ref.txt)
        echo "Ref to use: $ref"
        echo "ref=$ref" >> "$GITHUB_OUTPUT"
    - name: Check out iotauth repository
      uses: actions/checkout@v4
      with:
        repository: iotauth/iotauth
        submodules: true
        ref: ${{ steps.read_ref.outputs.ref }}
    - name: Check out specific ref of sst-c-api
      uses: actions/checkout@v4
      with:
        repository: iotauth/sst-c-api
        path: entity/c
        ref: ${{ github.ref }}
      if: ${{ github.ref}}
    - name: Install openssl
      run: sudo apt-get update && sudo apt-get install -y openssl
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file auth/pom.xml
    - name: Run the credential generation scripts
      working-directory: examples
      run: |
        chmod +x ./cleanAll.sh ./generateAll.sh
        ./cleanAll.sh
        ./generateAll.sh -p asdf
    - name: Run the auth in background.
      working-directory: auth/auth-server
      run: |
        nohup java -jar target/auth-server-jar-with-dependencies.jar -p ../properties/exampleAuth101.properties --password=asdf &
        echo $! > auth.pid  # Save the PID

    - name: Run the file_block_encrypt_example examples.
      working-directory: entity/c/examples/file_block_encrypt_example
      run: |
        mkdir build && cd build && cmake ../ && make
        ./block_writer ../block_writer.config
        ./block_reader ../block_reader.config
        ./block_reader_load_s_key_list

    - name: Run the server_client_example examples.
      working-directory: entity/c/examples/server_client_example
      run: |
        mkdir build && cd build && cmake ../ && make
        ./entity_server ../c_server.config &
        ./entity_client ../c_client.config
        ./threaded_get_target_id_client ../c_client.config
        ./threaded_get_target_id_server ../c_server.config

    - name: Run the tests examples.
      working-directory: entity/c/tests
      run: |
        mkdir build && cd build && cmake ../ && make
        ./save_load_session_key_list_with_password_test ../test_configs/client.config
        # ./encrypt_buf_with_session_key_without_malloc_execution_time_test ../test_configs/client.config
        ./multi_thread_get_session_key_test ../test_configs/client.config

    - name: Stop auth server
      working-directory: auth/auth-server
      run: |
        if [ -f auth.pid ]; then
          kill $(cat auth.pid) || echo "Auth server already stopped."
        else
          echo "No auth.pid file found"
        fi    

    - name: Install IPFS
      run: |
        wget https://dist.ipfs.tech/kubo/v0.36.0/kubo_v0.36.0_linux-amd64.tar.gz
        tar -xvzf kubo_v0.36.0_linux-amd64.tar.gz
        cd kubo
        sudo bash install.sh
        ipfs init
        nohup ipfs daemon &

    - name: Run the credential generation scripts for IPFS examples.
      working-directory: examples
      run: |
        chmod +x ./cleanAll.sh ./generateAll.sh
        ./cleanAll.sh
        ./generateAll.sh -g configs/file_sharing.graph -p asdf
    - name: Run the auth in background.
      working-directory: auth/auth-server
      run: |
        nohup java -jar target/auth-server-jar-with-dependencies.jar -p ../properties/exampleAuth101.properties --password=asdf &
        echo $! > auth.pid  # Save the PID

    - name: Run the python file system manager.
      working-directory: examples/file_sharing
      run: |
        nohup python3 file_system_manager.py &
        echo $! > python.pid  # Save the PID

    - name: Run the ipfs examples.
      working-directory: entity/c/examples/ipfs_examples
      run: |
        touch plain_text
        cd c
        mkdir build && cd build && cmake ../ && make
        ./entity_uploader ../../uploader.config ../../plain_text ../../addReader.txt
        ./entity_downloader ../../downloader.config
        cd ../../cpp
        mkdir build && cd build && cmake ../ && make
        ./uploader ../../uploader.config ../../plain_text ../../addReader.txt & # This waits for the downloader, execute in background and sleep 3 second.
        sleep 3
        ./downloader ../../downloader.config
    - name: Stop python file system manager.
      working-directory: examples/file_sharing
      run: |
        if [ -f python.pid ]; then
          kill $(cat python.pid) || echo "File system manager already stopped."
        else
          echo "No python.pid file found"
        fi    

    - name: Run the secure python file system manager.
      working-directory: examples/file_sharing
      run: |
        pip3 install pycryptodome
        nohup python3 secure_file_system_manager.py file_system_manager.config -p asdf &
        echo $! > secure_python.pid  # Save the PID

    - name: Run the secure ipfs examples.
      working-directory: entity/c/examples/ipfs_examples/c/build
      run: |
        ./secure_entity_uploader ../../secure_uploader.config ../../plain_text ../../addReader.txt
        sleep 3
        ./secure_entity_downloader ../../secure_downloader.config
    - name: Stop python file system manager.
      working-directory: examples/file_sharing
      run: |
        if [ -f secure_python.pid ]; then
          kill $(cat secure_python.pid) || echo "File system manager already stopped."
        else
          echo "No secure_python.pid file found"
        fi    
