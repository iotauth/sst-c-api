SST TESTBED
===========

PREREQUISITES
-------------

Auth
----
1. OpenSSL command line tools for creating certificates and keystores of Auths and example entities
2. Java 11 or above
3. Maven CLI (http://maven.apache.org/ref/3.1.0/maven-embedder/cli.html) for building Auth from the command line
4. Node.js for running example server and client entities

sst-c-api
---------
1. OpenSSL 3.0 or above
2. CMake 3.19 or above


INSTALLATION
------------

Debian/Ubuntu
-------------
sudo apt-get update && sudo apt-get install -y \
    openjdk-11-jdk \
    maven \
    nodejs \
    npm \
    openssl \
    cmake \
    build-essential \
    pkg-config \
    libssl-dev


MacOS
-----
brew install openjdk@11 maven node openssl cmake pkg-config


VERIFY VERSIONS
---------------
java -version
mvn -version
node -v
openssl version
cmake --version


CLONE REPOSITORY & UPDATE SUBMODULE
-----------------------------------
git clone https://github.com/iotauth/iotauth.git
cd iotauth
git submodule update --init



COMPILATION
-----------

Compilation of Auth
-------------------
1. Go to directory iotauth/examples

Compile the scenario code
-------------------------
1. Go to iotauth/entity/c/examples/scenario_example/
2. Run: mkdir build && cd build
3. Run: cmake ..
   - Run: cmake -DCMAKE_BUILD_TYPE=Debug ..   (for debugging mode)
4. Run: make


RUNNING EXAMPLES
----------------
We have multiple examples to run.
1. Basic messaging examples with no attacks.
2. Attack scenarios
    2.1 Replay attack
    2.2 Denial of Service (DoS) attacks
        2.2.1 to Auth via session key requests (DoSK)
        2.2.2 to server via sending messages (DoSM)
        2.2.3 to server, and indirectly to Auth via connection requests (DoSC)
    2.3 Denial of Service (DoS) attacks with multiple clients
        2.3.1 DDoSK
        2.3.2 DDoSM
        2.3.3 DDoSC

We clarify that all examples need the Auth to distribute keys, so launching the Auth once in one terminal will cover from Basic messaging examples to DoS attacks.
However, for convenience, DoS attacks with multiple clients have its own script to launch the Auth and clients.


Running the Auth
----------------
1. Go to $ROOT/auth/auth-server/
2. Build the executable jar file by running: mvn clean install
3. Run the jar file with the properties file for Auth101:
   java -jar target/auth-server-jar-with-dependencies.jar -p ../properties/exampleAuth101.properties


1. Basic Messaging
------------------
1. Go to $ROOT/entity/c/examples/scenario_example/
2. [Optional] Customize csv_files/basic_messages.csv to have the client send custom messages to the server.
   - The format of the input CSV file for this example should be:
     - Each entry should be on its own line.
     - First is amount of time spent sleeping (in milliseconds).
     - Second is the message.
     - The sleep time and message are always separated by only a single comma.
   Example:
   <sleep_time1>,<message1>
   <sleep_time2>,<message2>
   ...

3. Run: cd build
4. Run the server:
   ./server ../../server_client_example/c_server.config
5. Run the client in another terminal:
   ./client ../../server_client_example/c_client.config ../csv_files/basic_messages.csv

2. ATTACK SCENARIOS
===================

2.1 Replay Attack
-----------------
1. Go to $ROOT/entity/c/examples/scenario_example/
2. [Optional] Customize csv_files/replay_attack.csv to have the client send custom messages and replay attacks to the server.
   - The format of the input CSV file for this attack example should be:
     - First and second are same as in Basic Messaging.
     - Third is the attack type word: "Replay" (case insensitive).
     - Fourth is the sequence number change because this attack revolves around modifying the sequence number.
       - The formatting for changing the sequence number is "seq++", "seq--", or "seq=#" where # can be any integer.

   Example:
   <sleep_time1>,<message1>,Replay,seq--
   <sleep_time2>,<message2>,REPLAY,seq++
   <sleep_time2>,<message2>,replay,seq=12
   ...

3. Run: cd build
4. Run the server:
   ./server ../../server_client_example/c_server.config
5. Run the client in another terminal:
   ./client ../../server_client_example/c_client.config ../csv_files/replay_attack.csv


2.2 Denial of Service (DoS) Attack
----------------------------------

2.2.1 DoS attack to Auth via session key requests (DoSK)
--------------------------------------------------------
1. Go to $ROOT/entity/c/examples/scenario_example/
2. [Optional] Customize csv_files/dos_attack_key.csv to have the client send custom messages and DoS attacks to the server.
   - The format of the input CSV file for this attack example should be:
     - First and second are same as in Basic Messaging.
     - Third is "DoSK".
     - Fourth is the number of session key requests the client will make to Auth.

   Example:
   <sleep_time1>,<message1>,DoSK,10000
   <sleep_time2>,<message2>,DOSK,55555
   <sleep_time2>,<message2>,dosk,123456
   ...

3. Run: cd build
4. Run the server:
   ./server ../../server_client_example/c_server.config
5. Run the client in another terminal:
   ./client ../../server_client_example/c_client.config ../csv_files/dos_attack_key.csv

2.2.2 DoS attack to Server via session key requests (DoSM)
----------------------------------------------------------
1. Go to $ROOT/entity/c/examples/scenario_example/
2. [Optional] Customize csv_files/dos_attack_message.csv to have the client send custom messages and DoS attacks to the server.
   - The format of the input CSV file for this attack example should be:
     - First and second are same as in Basic Messaging.
     - Third is "DoSM".
     - Fourth is the number of times the message will be sent to the server.

   Example:
   <sleep_time1>,<message1>,DoSM,10000
   <sleep_time2>,<message2>,DOSM,55555
   <sleep_time2>,<message2>,dosm,123456
   ...

3. Run: cd build
4. Run the server:
   ./server ../../server_client_example/c_server.config
5. Run the client in another terminal:
   ./client ../../server_client_example/c_client.config ../csv_files/dos_attack_message.csv


2.2.3 DoS attack to Server and Auth via connection requests (DoSC)
------------------------------------------------------------------
1. Go to $ROOT/entity/c/examples/scenario_example/
2. [Optional] Customize csv_files/dos_attack_message.csv to have the client send custom messages and DoS attacks to the server.
   - The format of the input CSV file for this attack example should be:
     - First and second are same as in Basic Messaging.
     - Third is "DoSC".
     - Fourth is the number of times the client should connect to the server using Auth.

   Example:
   <sleep_time1>,<message1>,DoSC,10000
   <sleep_time2>,<message2>,DOSC,55555
   <sleep_time2>,<message2>,dosc,123456
   ...

3. Run: cd build
4. Run the server:
   ./server ../../server_client_example/c_server.config
5. Run the client in another terminal:
   ./client ../../server_client_example/c_client.config ../csv_files/dos_attack_connect.csv


2.3 DoS attack with Multiple Clients (DDoS)
-------------------------------------------
This attack involves using many clients to connect to the server to create the denial of service. 
To do that, the Auth databases and configurations need to be modified to support this.
Make sure that the Auth executed before is terminated.

Create New Graph for Auth Databases and Configuration Files for the Clients
---------------------------------------------------------------------------
1. Go to $ROOT/entity/c/examples/scenario_example/clients_dos_attack
2. [Optional] chmod +x clients_dos_setup.sh
3. Run: ./client_dos_setup.sh <number-of-clients> -p <password>
   - <number-of-clients> is the maximum number of clients that Auth should be able to recognize and is defined by the parameter.
   - [Optional] <password> is the password of the generated Auth.
   - Example: ./client_dos_setup.sh 3 -p asdf
4. Insert a password when prompted.
5. Run: ./run_clients.sh <number-of-clients> <input-file>
   - <number-of-clients> is the number of clients that should be created during this execution.
   - <input-file> is the input CSV file that the program should read for this execution.
     - The format of the file should match the corresponding format for each attack type given above, 
       because the attacks are the same, only that multiple clients are performing the attack simultaneously.
     - Example: ./run_clients.sh 3 ../csv_files/dos_attack_connect.csv

Each client will be launched in a unique terminal window and will simultaneously perform the attack specified in the input CSV file.